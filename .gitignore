# Generated by Cargo
# will have compiled files and executables
/target/
**/*.rs.bk

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# VS Code specific
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# IntelliJ/RustRover specific
.idea/
*.iml
*.ipr
*.iws
.idea_modules/

# Eclipse specific
.settings/
.classpath
.project

# macOS specific
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Windows specific
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/

# Docker
.dockerignore
docker-compose.override.yml
pg_data/
rustash_data/
.env

# Linux specific
*~

# Debug log from cargo
debug.log

# Environment files
.env
.env.*
!.env.example

# Local development overrides
local-overrides.toml

# Rustfmt configuration
rustfmt.toml

# Cargo target directory
**/target/

# Remove this if you have a binary target
Cargo.lock

# These are build dependencies that don't need to be in git
build/

# These are local development files
*.local

# Coverage files
coverage/
*.profraw

# Ignore backup migrations directories
migrations_backup_*

# LLVM coverage mapping files
*.profdata
*.profdata.*

# Generated documentation
/doc/

# Local Netlify folder
.netlify

# Local development environment
.venv/
.env.local
.env.*.local

# Logs
logs/
*.log

# System Files
.DS_Store
Thumbs.db
